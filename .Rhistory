# --- MODEL 1: Regresi Linier Sederhana ---
model_linier <- lm(X0 ~ X12, data = data)
summary(model_linier)
# --- MODEL 2: Regresi Kuadrat (Polinomial Derajat 2) ---
model_kuadrat <- lm(X0 ~ X12 + I(X12^2), data = data)
summary(model_kuadrat)
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
install.packages("Rcmdr")
library(Rcmdr)
install.packages("RcmdrMisc")
library(Rcmdr)
data <- read_CSV("AA STIS/Semester 4/Komputasi Statistik/Pertemuan 12/data_kabkota.csv")
library(readr)
data_kabkota <- read_csv("AA STIS/Semester 4/Komputasi Statistik/Pertemuan 12/data_kabkota.csv")
View(data_kabkota)
library(readr)
data_kabkota <- read_csv("AA STIS/Semester 4/Komputasi Statistik/Pertemuan 12/data_kabkota.csv")
View(data_kabkota)
# Memuat pustaka yang dibutuhkan
library(ggplot2)
library(car)         # Untuk uji asumsi
library(lmtest)      # Untuk uji Breusch-Pagan
library(nortest)     # Untuk uji normalitas tambahan
# Membaca data dari file CSV
data <- read_sav("C:/Users/User/Downloads/Data_TugasModul12.sav")
# Memuat pustaka yang dibutuhkan
library(ggplot2)
library(car)         # Untuk uji asumsi
library(lmtest)      # Untuk uji Breusch-Pagan
library(nortest)     # Untuk uji normalitas tambahan
library(haven)       # Untuk mengimport file SPSS
# Membaca data dari file CSV
data <- read_sav("C:/Users/User/Downloads/Data_TugasModul12.sav")
# Menampilkan struktur data
str(data)
# Asumsi: kolom Y, X1, dan X3 memang bernama 'Y', 'X1', dan 'X3'
# Membangun model regresi linear Y ~ X1 + X3
model <- lm(Y ~ X1 + X3, data = data)
# Menampilkan ringkasan hasil regresi
summary(model)
# Menampilkan persamaan regresi
cat("Persamaan regresi: Y =", round(coef(model)[1], 4), "+", round(coef(model)[2], 4), "* X1 +", round(coef(model)[3], 4), "* X3")
# Menggunakan uji Shapiro-Wilk untuk normalitas residual
shapiro.test(resid(model))
# Visualisasi: Histogram dan QQ plot residual
hist(resid(model), main = "Histogram Residual", xlab = "Residual", col = "skyblue", border = "white")
qqnorm(resid(model))
qqline(resid(model), col = "red")
# Uji Breusch-Pagan untuk mendeteksi heteroskedastisitas
bptest(model)
# Visualisasi: Plot residual vs nilai prediksi
plot(fitted(model), resid(model),
main = "Residual vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 19, col = "blue")
abline(h = 0, col = "red")
# Jika uji normalitas gagal, lakukan transformasi log terhadap Y
model_log <- lm(log(Y) ~ X1 + X3, data = data)
# Ringkasan model baru
summary(model_log)
# Uji Shapiro ulang
shapiro.test(resid(model_log))
# Visualisasi residual baru
qqnorm(resid(model_log))
qqline(resid(model_log), col = "red")
# Gunakan transformasi Box-Cox bila perlu
library(MASS)
boxcox(model, lambda = seq(-2, 2, 0.1))
# Asumsikan data Anda telah dibaca dan bernama 'data'
# Pastikan tidak ada nilai nol atau negatif sebelum transformasi log
# Jika ada, filter atau ubah terlebih dahulu
# Transformasi semua variabel yang relevan menggunakan log natural (ln)
data$ln_Y <- log(data$Y)
data$ln_X1 <- log(data$X1)
data$ln_X3 <- log(data$X3)
# Bangun model regresi log-lin (log semua variabel)
model_ln <- lm(ln_Y ~ ln_X1 + ln_X3, data = data)
# Tampilkan ringkasan model
summary(model_ln)
# Uji normalitas residual model log-lin
shapiro.test(resid(model_ln))
# Visualisasi tambahan (opsional)
hist(resid(model_ln), main = "Histogram Residual (log-lin model)", xlab = "Residual")
qqnorm(resid(model_ln)); qqline(resid(model_ln), col = "red")
# Uji homoskedastisitas
library(lmtest)
bptest(model_ln)
library(MASS)
boxcox_result <- boxcox(model)
lambda <- boxcox_result$x[which.max(boxcox_result$y)]
# Model baru dengan transformasi Y
if (lambda != 1) {
data$Y_transformed <- (data$Y^lambda - 1) / lambda
model_transformed <- lm(Y_transformed ~ X1 + X3, data = data)
shapiro.test(residuals(model_transformed))
}
utils:::menuInstallPkgs()
q()
---
title: "Untitled"
library(shiny); runApp('AA STIS/Semester 4/Komputasi Statistik/Kelompok/Script Proyek Akhir (1).R')
runApp('AA STIS/Semester 4/Komputasi Statistik/Kelompok/Script Proyek Akhir (1).R')
runApp('AA STIS/Semester 4/Komputasi Statistik/Kelompok/Script Proyek Akhir (1).R')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
install.packages("officer")
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp()
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS FIX')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS FIX')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS FIX')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp()
runApp()
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Instalasi paket jika belum terpasang (cukup jalankan sekali)
# install.packages(c("tidyverse", "car", "lmtest", "nortest", "GGally"))
# Memuat library yang diperlukan
library(tidyverse) # Untuk manipulasi data dan visualisasi (ggplot2)
library(car)       # Untuk uji VIF dan Durbin-Watson
library(lmtest)    # Untuk uji Breusch-Pagan dan Durbin-Watson
library(nortest)   # Untuk uji normalitas tambahan (misal: Anderson-Darling)
library(GGally)    # Untuk plot matriks korelasi yang lebih informatif
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
g
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Instalasi paket jika belum terpasang (cukup jalankan sekali)
# install.packages(c("tidyverse", "car", "lmtest", "nortest", "GGally"))
# Memuat library yang diperlukan
library(tidyverse) # Untuk manipulasi data dan visualisasi (ggplot2)
library(car)       # Untuk uji VIF dan Durbin-Watson
library(lmtest)    # Untuk uji Breusch-Pagan dan Durbin-Watson
library(nortest)   # Untuk uji normalitas tambahan (misal: Anderson-Darling)
library(GGally)    # Untuk plot matriks korelasi yang lebih informatif
# Menetapkan tingkat signifikansi global
alpha <- 0.05
# Ganti "nama_file.csv" dengan nama file data Anda
# data <- read.csv("nama_file.csv")
# Untuk contoh, kita buat data dummy
set.seed(123)
x_poly <- seq(1, 20, 0.5)
y_poly <- 5 + 2*x_poly - 0.1*x_poly^2 + rnorm(length(x_poly), 0, 5)
data_poly <- data.frame(X = x_poly, Y = y_poly)
# Melihat beberapa baris pertama data
head(data_poly)
# Membuat scatter plot untuk identifikasi pola data
ggplot(data_poly, aes(x = X, y = Y)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = "red") +
labs(title = "Scatter Plot antara Variabel X dan Y",
x = "Nama Variabel X",
y = "Nama Variabel Y") +
theme_bw()
# Model 1: Regresi Linier Sederhana
model_linier <- lm(Y ~ X, data = data_poly)
# Model 2: Regresi Polinomial Orde 2 (Kuadratik)
model_kuadratik <- lm(Y ~ X + I(X^2), data = data_poly)
# Alternatif: model_kuadratik <- lm(Y ~ poly(X, 2, raw = TRUE), data = data_poly)
# Model 3: Regresi Polinomial Orde 3 (Kubik)
model_kubik <- lm(Y ~ X + I(X^2) + I(X^3), data = data_poly)
# Membandingkan model menggunakan R-squared, Adjusted R-squared, dan Uji ANOVA
summary(model_linier)
summary(model_kuadratik)
summary(model_kubik)
# Uji ANOVA untuk membandingkan model secara sekuensial
anova(model_linier, model_kuadratik, model_kubik)
# Uji Shapiro-Wilk
shapiro_test_poly <- shapiro.test(residuals(model_terbaik_poly))
# Tetapkan model terbaik untuk analisis selanjutnya
model_terbaik_poly <- model_kuadratik # Ganti sesuai pilihan Anda
# Uji Shapiro-Wilk
shapiro_test_poly <- shapiro.test(residuals(model_terbaik_poly))
print(shapiro_test_poly)
# Visualisasi: Q-Q Plot
qqnorm(residuals(model_terbaik_poly))
qqline(residuals(model_terbaik_poly), col = "red", lwd = 2)
#Library
# Library data manipulation dan analisis
library(dplyr)
# Library regresi dan uji asumsi klasik
library(car)       # VIF multikolinearitas
library(lmtest)    # bptest heteroskedastisitas, dwtest autokorelasi
library(sandwich)  # robust standard error
# Library import file
library(readxl)    # import excel
library(readr)     # import csv
library(haven)     # import sav (SPSS)
# Membuat data manual
Periode <- c('2022-05', '2022-06', '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12', '2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06', '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12')
Ekspor <- c(220.40, 203.90, 207.20, 211.20, 231.10, 220.70, 247.60, 247.60, 272.90, 269.10, 283.90, 287.00, 275.40, 275.10, 269.10, 232.80, 248.10, 252.40, 278.60, 278.50)
Investasi <- c(2.52, 2.17, 2.20, 2.52, 2.31, 2.52, 3.02, 3.01, 3.53, 3.46, 3.74, 3.80, 3.58, 3.59, 3.45, 2.72, 3.02, 3.12, 3.62, 3.62)
Kebijakan <- c(0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1)
data <- data.frame(Periode, Ekspor, Investasi, Kebijakan)
head(data)
model <- lm(Ekspor ~ Investasi + Kebijakan, data=data)
summary(model)
#Library
# Library data manipulation dan analisis
library(dplyr)
# Library regresi dan uji asumsi klasik
library(car)       # VIF multikolinearitas
library(lmtest)    # bptest heteroskedastisitas, dwtest autokorelasi
library(sandwich)  # robust standard error
library(nortest)   # lillie.test (Kolmogorov-Smirnov)
# Library import file
library(readxl)    # import excel
library(readr)     # import csv
library(haven)     # import sav (SPSS)
# Membuat data manual
Periode <- c('2022-05', '2022-06', '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12', '2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06', '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12')
Ekspor <- c(220.40, 203.90, 207.20, 211.20, 231.10, 220.70, 247.60, 247.60, 272.90, 269.10, 283.90, 287.00, 275.40, 275.10, 269.10, 232.80, 248.10, 252.40, 278.60, 278.50)
Investasi <- c(2.52, 2.17, 2.20, 2.52, 2.31, 2.52, 3.02, 3.01, 3.53, 3.46, 3.74, 3.80, 3.58, 3.59, 3.45, 2.72, 3.02, 3.12, 3.62, 3.62)
Kebijakan <- c(0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1)
data <- data.frame(Periode, Ekspor, Investasi, Kebijakan)
head(data)
model <- lm(Ekspor ~ Investasi + Kebijakan, data=data)
summary(model)
lillie.test(residuals(model))
shapiro.test(residuals(model))
glejser <- lm(abs(residuals(model)) ~ Investasi + Kebijakan, data=data)
summary(glejser)
dwtest(model)
vif(model)
# Membuat data frame dari data yang diberikan
data_vaksin <- data.frame(
Dosis_Konsentrasi_ml = c(0.50, 0.50, 1.00, 1.00, 1.50, 1.50,
2.00, 2.00, 2.50, 2.50, 3.00, 3.00),
Respon_Kulit_mm = c(13.90, 13.81, 14.08, 13.99, 13.75, 13.60,
13.32, 13.39, 13.45, 13.53, 13.59, 13.64)
)
# Melihat struktur data
cat("Struktur Data:\n")
str(data_vaksin)
cat("\nRingkasan Statistik Data:\n")
summary(data_vaksin)
# Membuat data frame dari data yang diberikan
data_vaksin <- data.frame(
Dosis_Konsentrasi_ml = c(0.50, 0.50, 1.00, 1.00, 1.50, 1.50, 2.00, 2.00, 2.50, 2.50, 3.00, 3.00),
Respon_Kulit_mm = c(13.90, 13.81, 14.08, 13.99, 13.75, 13.60, 13.32, 13.39, 13.45, 13.53, 13.59, 13.64)
)
# Melihat struktur data
cat("Struktur Data:\n")
str(data_vaksin)
cat("\nRingkasan Statistik Data:\n")
summary(data_vaksin)
head(data_vaksin)
# Memuat library ggplot2 untuk plot yang lebih baik
# install.packages("ggplot2") # Uncomment jika belum terinstal
library(ggplot2)
ggplot(data_vaksin, aes(x = Dosis_Konsentrasi_ml, y = Respon_Kulit_mm)) +
geom_point() +
labs(title = "Kurva Hubungan antara Dosis Konsentrasi dan Respon Kulit",
x = "Dosis Konsentrasi (mililiter)",
y = "Respon Kulit (milimeter)") +
theme_minimal() +
geom_smooth(method = "lm", formula = y ~ x, col = "blue", se = FALSE, linetype = "dashed") + # Linear
geom_smooth(method = "lm", formula = y ~ poly(x, 2), col = "red", se = FALSE) + # Kuadratik
geom_smooth(method = "lm", formula = y ~ poly(x, 3), col = "green", se = FALSE, linetype = "dotted") # Kubik
# Model Ordo 1 (Linier)
model_ordo1 <- lm(Respon_Kulit_mm ~ Dosis_Konsentrasi_ml, data = data_vaksin)
cat("Ringkasan Model Ordo 1:\n")
summary(model_ordo1)
# Model Ordo 2 (Kuadratik)
model_ordo2 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 2, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 2:\n")
summary(model_ordo2)
# Model Ordo 3 (Kubik)
model_ordo3 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 3, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 3:\n")
summary(model_ordo3)
cat("\nPerbandingan R-squared dan Adjusted R-squared:\n")
r2_ordo1 <- summary(model_ordo1)$r.squared
adj_r2_ordo1 <- summary(model_ordo1)$adj.r.squared
cat(paste0("Model Ordo 1: R-squared = ", round(r2_ordo1, 4), ", Adjusted R-squared = ", round(adj_r2_ordo1, 4), "\n"))
r2_ordo2 <- summary(model_ordo2)$r.squared
adj_r2_ordo2 <- summary(model_ordo2)$adj.r.squared
cat(paste0("Model Ordo 2: R-squared = ", round(r2_ordo2, 4), ", Adjusted R-squared = ", round(adj_r2_ordo2, 4), "\n"))
r2_ordo3 <- summary(model_ordo3)$r.squared
adj_r2_ordo3 <- summary(model_ordo3)$adj.r.squared
cat(paste0("Model Ordo 3: R-squared = ", round(r2_ordo3, 4), ", Adjusted R-squared = ", round(adj_r2_ordo3, 4), "\n"))
cat("\nPerbandingan R-squared dan Adjusted R-squared:\n")
r2_ordo1 <- summary(model_ordo1)$r.squared
adj_r2_ordo1 <- summary(model_ordo1)$adj.r.squared
cat(paste0("Model Ordo 1: R-squared = ", round(r2_ordo1, 4), ", Adjusted R-squared = ", round(adj_r2_ordo1, 4), "\n"))
r2_ordo2 <- summary(model_ordo2)$r.squared
adj_r2_ordo2 <- summary(model_ordo2)$adj.r.squared
cat(paste0("Model Ordo 2: R-squared = ", round(r2_ordo2, 4), ", Adjusted R-squared = ", round(adj_r2_ordo2, 4), "\n"))
r2_ordo3 <- summary(model_ordo3)$r.squared
adj_r2_ordo3 <- summary(model_ordo3)$adj.r.squared
cat(paste0("Model Ordo 3: R-squared = ", round(r2_ordo3, 4), ", Adjusted R-squared = ", round(adj_r2_ordo3, 4), "\n"))
# Model Ordo 1 (Linier)
model_ordo1 <- lm(Respon_Kulit_mm ~ Dosis_Konsentrasi_ml, data = data_vaksin)
cat("Ringkasan Model Ordo 1:\n")
summary(model_ordo1)
# Model Ordo 2 (Kuadratik)
model_ordo2 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 2, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 2:\n")
summary(model_ordo2)
# Model Ordo 3 (Kubik)
model_ordo3 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 3, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 3:\n")
summary(model_ordo3)
# Model Ordo 1 (Linier)
model_ordo1 <- lm(Respon_Kulit_mm ~ Dosis_Konsentrasi_ml, data = data_vaksin)
cat("Ringkasan Model Ordo 1:\n")
summary(model_ordo1)
# Model Ordo 2 (Kuadratik)
model_ordo2 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 2, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 2:\n")
summary(model_ordo2)
# Model Ordo 3 (Kubik)
model_ordo3 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 3, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 3:\n")
summary(model_ordo3)
# Model awal
ols_model <- lm(Y ~ X1 + X2, data = dataku)
# Model awal
ols_model <- lm(Y ~ X1 + X2, data = data)
# Model awal
ols_model <- lm(Y ~ X1 + X2, data = data)
# Model awal
ols_model <- lm(Yi ~ X1 + X2, data = data)
# Langkah 1: Model awal
model <- lm(Ekspor ~ Investasi + Kebijakan, data = data)
res <- abs(residuals(model))
# Langkah 2: Regressi residu absolut terhadap prediksi
var_model <- lm(res ~ fitted(model))
# Langkah 3: Buat bobot
w <- 1 / (fitted(var_model)^2)
# Langkah 4: Weighted Least Squares
wls_model <- lm(Ekspor ~ Investasi + Kebijakan, data = data, weights = w)
summary(wls_model)
# Transformasi log pada Y (asumsikan semua Ekspor > 0)
data$logEkspor <- log(data$Ekspor)
# Model regresi log(Ekspor)
log_model <- lm(logEkspor ~ Investasi + Kebijakan, data = data)
summary(log_model)
shapiro.test(residuals(log_model))
# Install dan load package
install.packages("orcutt")
install.packages("orcutt")
library(orcutt)
aic_values <- AIC(model_1, model_2, model_3)
# Model Ordo 1 (Linier)
model_ordo1 <- lm(Respon_Kulit_mm ~ Dosis_Konsentrasi_ml, data = data_vaksin)
cat("Ringkasan Model Ordo 1:\n")
summary(model_ordo1)
# Model Ordo 2 (Kuadratik)
model_ordo2 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 2, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 2:\n")
summary(model_ordo2)
# Model Ordo 3 (Kubik)
model_ordo3 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 3, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 3:\n")
summary(model_ordo3)
aic_values <- AIC(model_ordo1, model_ordo2, model_ordo3)
bic_values <- BIC(model_ordo1, model_ordo2, model_ordo3)
list(
R2 = c(R2_1 = summary(model_1)$r.squared, R2_2 = summary(model_2)$r.squared, R2_3 = summary(model_3)$r.squared),
AdjR2 = c(AdjR2_1 = summary(model_1)$adj.r.squared, AdjR2_2 = summary(model_2)$adj.r.squared, AdjR2_3 = summary(model_3)$adj.r.squared),
AIC = aic_values,
BIC = bic_values
)
aic_values <- AIC(model_ordo1, model_ordo2, model_ordo3)
bic_values <- BIC(model_ordo1, model_ordo2, model_ordo3)
list(
R2 = c(R2_1 = summary(model_ordo11)$r.squared, R2_2 = summary(model_ordo2)$r.squared, R2_3 = summary(model_ordo3)$r.squared),
AdjR2 = c(AdjR2_1 = summary(model_ordo1)$adj.r.squared, AdjR2_2 = summary(model_ordo2)$adj.r.squared, AdjR2_3 = summary(model_ordo3)$adj.r.squared),
AIC = aic_values,
BIC = bic_values
)
aic_values <- AIC(model_ordo1, model_ordo2, model_ordo3)
bic_values <- BIC(model_ordo1, model_ordo2, model_ordo3)
list(
R2 = c(R2_1 = summary(model_ordo1)$r.squared, R2_2 = summary(model_ordo2)$r.squared, R2_3 = summary(model_ordo3)$r.squared),
AdjR2 = c(AdjR2_1 = summary(model_ordo1)$adj.r.squared, AdjR2_2 = summary(model_ordo2)$adj.r.squared, AdjR2_3 = summary(model_ordo3)$adj.r.squared),
AIC = aic_values,
BIC = bic_values
)
#Library
# Library data manipulation dan analisis
library(dplyr)
# Library regresi dan uji asumsi klasik
library(car)       # VIF multikolinearitas
library(lmtest)    # bptest heteroskedastisitas, dwtest autokorelasi
library(sandwich)  # robust standard error
library(nortest)   # lillie.test (Kolmogorov-Smirnov)
# Library import file
library(readxl)    # import excel
library(readr)     # import csv
library(haven)     # import sav (SPSS)
# Membuat data manual
Periode <- c('2022-05', '2022-06', '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12', '2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06', '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12')
Ekspor <- c(220.40, 203.90, 207.20, 211.20, 231.10, 220.70, 247.60, 247.60, 272.90, 269.10, 283.90, 287.00, 275.40, 275.10, 269.10, 232.80, 248.10, 252.40, 278.60, 278.50)
Investasi <- c(2.52, 2.17, 2.20, 2.52, 2.31, 2.52, 3.02, 3.01, 3.53, 3.46, 3.74, 3.80, 3.58, 3.59, 3.45, 2.72, 3.02, 3.12, 3.62, 3.62)
Kebijakan <- c(0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1)
data <- data.frame(Periode, Ekspor, Investasi, Kebijakan)
head(data)
model <- lm(Ekspor ~ Investasi + Kebijakan, data=data)
summary(model)
lillie.test(residuals(model))
shapiro.test(residuals(model))
glejser <- lm(abs(residuals(model)) ~ Investasi + Kebijakan, data=data)
summary(glejser)
dwtest(model)
vif(model)
# Transformasi log pada Y (asumsikan semua Ekspor > 0)
data$logEkspor <- log(data$Ekspor)
# Model regresi log(Ekspor)
log_model <- lm(logEkspor ~ Investasi + Kebijakan, data = data)
summary(log_model)
shapiro.test(residuals(log_model))
# Langkah 1: Model awal
model <- lm(Ekspor ~ Investasi + Kebijakan, data = data)
res <- abs(residuals(model))
# Langkah 2: Regressi residu absolut terhadap prediksi
var_model <- lm(res ~ fitted(model))
# Langkah 3: Buat bobot
w <- 1 / (fitted(var_model)^2)
# Langkah 4: Weighted Least Squares
wls_model <- lm(Ekspor ~ Investasi + Kebijakan, data = data, weights = w)
summary(wls_model)
# Install dan load package
install.packages("orcutt")
library(orcutt)
# Membuat data frame dari data yang diberikan
data_vaksin <- data.frame(
Dosis_Konsentrasi_ml = c(0.50, 0.50, 1.00, 1.00, 1.50, 1.50, 2.00, 2.00, 2.50, 2.50, 3.00, 3.00),
Respon_Kulit_mm = c(13.90, 13.81, 14.08, 13.99, 13.75, 13.60, 13.32, 13.39, 13.45, 13.53, 13.59, 13.64)
)
# Melihat struktur data
cat("Struktur Data:\n")
str(data_vaksin)
cat("\nRingkasan Statistik Data:\n")
summary(data_vaksin)
head(data_vaksin)
# Memuat library ggplot2 untuk plot yang lebih baik
# install.packages("ggplot2") # Uncomment jika belum terinstal
library(ggplot2)
ggplot(data_vaksin, aes(x = Dosis_Konsentrasi_ml, y = Respon_Kulit_mm)) +
geom_point() +
labs(title = "Kurva Hubungan antara Dosis Konsentrasi dan Respon Kulit",
x = "Dosis Konsentrasi (mililiter)",
y = "Respon Kulit (milimeter)") +
theme_minimal() +
geom_smooth(method = "lm", formula = y ~ x, col = "blue", se = FALSE, linetype = "dashed") + # Linear
geom_smooth(method = "lm", formula = y ~ poly(x, 2), col = "red", se = FALSE) + # Kuadratik
geom_smooth(method = "lm", formula = y ~ poly(x, 3), col = "green", se = FALSE, linetype = "dotted") # Kubik
# Model Ordo 1 (Linier)
model_ordo1 <- lm(Respon_Kulit_mm ~ Dosis_Konsentrasi_ml, data = data_vaksin)
cat("Ringkasan Model Ordo 1:\n")
summary(model_ordo1)
# Model Ordo 2 (Kuadratik)
model_ordo2 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 2, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 2:\n")
summary(model_ordo2)
# Model Ordo 3 (Kubik)
model_ordo3 <- lm(Respon_Kulit_mm ~ poly(Dosis_Konsentrasi_ml, 3, raw = TRUE), data = data_vaksin)
cat("\nRingkasan Model Ordo 3:\n")
summary(model_ordo3)
cat("\nPerbandingan R-squared dan Adjusted R-squared:\n")
r2_ordo1 <- summary(model_ordo1)$r.squared
adj_r2_ordo1 <- summary(model_ordo1)$adj.r.squared
cat(paste0("Model Ordo 1: R-squared = ", round(r2_ordo1, 4), ", Adjusted R-squared = ", round(adj_r2_ordo1, 4), "\n"))
r2_ordo2 <- summary(model_ordo2)$r.squared
adj_r2_ordo2 <- summary(model_ordo2)$adj.r.squared
cat(paste0("Model Ordo 2: R-squared = ", round(r2_ordo2, 4), ", Adjusted R-squared = ", round(adj_r2_ordo2, 4), "\n"))
r2_ordo3 <- summary(model_ordo3)$r.squared
adj_r2_ordo3 <- summary(model_ordo3)$adj.r.squared
cat(paste0("Model Ordo 3: R-squared = ", round(r2_ordo3, 4), ", Adjusted R-squared = ", round(adj_r2_ordo3, 4), "\n"))
X <- data_vaksin$Dosis_Konsentrasi_ml
x <- X - mean(X)
data_vaksin$x <- x
model_2_centered <- lm(Respon_Kulit_mm ~ x + I(x^2), data = data_vaksin)
summary(model_2_centered)
aic_values <- AIC(model_ordo1, model_ordo2, model_ordo3)
bic_values <- BIC(model_ordo1, model_ordo2, model_ordo3)
list(
R2 = c(R2_1 = summary(model_ordo1)$r.squared, R2_2 = summary(model_ordo2)$r.squared, R2_3 = summary(model_ordo3)$r.squared),
AdjR2 = c(AdjR2_1 = summary(model_ordo1)$adj.r.squared, AdjR2_2 = summary(model_ordo2)$adj.r.squared, AdjR2_3 = summary(model_ordo3)$adj.r.squared),
AIC = aic_values,
BIC = bic_values
)
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
shiny::runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS')
runApp('AA STIS/Semester 4/Komputasi Statistik/UAS KIRIM')
